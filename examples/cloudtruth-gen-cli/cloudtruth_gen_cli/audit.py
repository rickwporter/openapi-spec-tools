#!/usr/bin/env python3
# Copyright 2025
#
# This code was generated by the openapi-spec-tools CLI generator, DO NOT EDIT
#

from datetime import date  # noqa: F401
from datetime import datetime  # noqa: F401
from enum import Enum  # noqa: F401
from pathlib import Path
from typing import Annotated  # noqa: F401
from typing import Optional  # noqa: F401

import typer

from cloudtruth_gen_cli import _arguments as _a
from cloudtruth_gen_cli import _display as _d  # noqa: F401
from cloudtruth_gen_cli import _exceptions as _e  # noqa: F401
from cloudtruth_gen_cli import _logging as _l  # noqa: F401
from cloudtruth_gen_cli import _requests as _r  # noqa: F401
from cloudtruth_gen_cli import _tree as _t


app = typer.Typer(no_args_is_help=True, help="View CloudTruth audit data")

@app.command("commands", short_help="Display commands tree for sub-commands")
def show_commands(
    display: _a.TreeDisplayOption = _a.TreeDisplay.HELP,
    depth: _a.MaxDepthOption = 5,
) -> None:
    path = Path(__file__).parent / "tree.yaml"
    _t.tree(path.as_posix(), "audit", display, depth)
    return


class Action(str, Enum):  # noqa: F811
    CREATE = "create"
    DELETE = "delete"
    PULL = "pull"
    PUSH = "push"
    UPDATE = "update"


@app.command("list", short_help="A searchable log of all the actions taken by users and service accounts within the organization.")
def audit_list(
    action: Annotated[Optional[Action], typer.Option(show_default=False, case_sensitive=False, help="The action that was taken.")] = None,
    earliest: Annotated[Optional[datetime], typer.Option(show_default=False, help="")] = None,
    environment_id: Annotated[Optional[str], typer.Option(show_default=False, help="Returns records for the environment, associated tags, and values.")] = None,
    latest: Annotated[Optional[datetime], typer.Option(show_default=False, help="")] = None,
    object_id: Annotated[Optional[str], typer.Option(show_default=False, help="")] = None,
    object_type: Annotated[Optional[str], typer.Option(show_default=False, help="")] = None,
    ordering: Annotated[Optional[str], typer.Option(show_default=False, help="Which field to use when ordering the results.")] = None,
    page: Annotated[Optional[int], typer.Option(show_default=False, help="A page number within the paginated result set.")] = None,
    page_size: Annotated[Optional[int], typer.Option(show_default=False, help="Number of results to return per page.")] = None,
    parameter_id: Annotated[Optional[str], typer.Option(show_default=False, help="Returns records for the parameter and associated values.")] = None,
    project_id: Annotated[Optional[str], typer.Option(show_default=False, help="Returns records for the project, it\'s parameters, and associated values.")] = None,
    user_id: Annotated[Optional[str], typer.Option(show_default=False, help="")] = None,
    _api_host: _a.ApiHostOption = "",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
    _max_count: _a.MaxCountOption = None,
) -> None:
    '''
    A searchable log of all the actions taken by users and service accounts within the organization.
    '''
    # handler for audit_list: GET /api/v1/audit/
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key)
    url = _r.create_url(_api_host, "api/v1/audit/")
    page_info = _r.PageParams(max_count=_max_count, page_size_name="page_size", page_size_value=page_size, page_start_name="page", page_start_value=page, item_property_name="result", next_property_name="next")
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}
    if action is not None:
        params["action"] = action
    if earliest is not None:
        params["earliest"] = earliest
    if environment_id is not None:
        params["environment_id"] = environment_id
    if latest is not None:
        params["latest"] = latest
    if object_id is not None:
        params["object_id"] = object_id
    if object_type is not None:
        params["object_type"] = object_type
    if ordering is not None:
        params["ordering"] = ordering
    if page is not None:
        params["page"] = page
    if page_size is not None:
        params["page_size"] = page_size
    if parameter_id is not None:
        params["parameter_id"] = parameter_id
    if project_id is not None:
        params["project_id"] = project_id
    if user_id is not None:
        params["user_id"] = user_id

    try:
        data = _r.depaginate(page_info, url, headers=headers, params=params, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


@app.command("show", short_help="Retrieve one record from the audit log.")
def audit_retrieve(
    id: Annotated[str, typer.Argument(show_default=False, help="A unique identifier for the audit record.")],
    _api_host: _a.ApiHostOption = "",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
) -> None:
    '''
    Retrieve one record from the audit log.
    '''
    # handler for audit_retrieve: GET /api/v1/audit/{id}/
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key)
    url = _r.create_url(_api_host, "api/v1/audit", id)
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}

    try:
        data = _r.request("GET", url, headers=headers, params=params, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


@app.command("summary", short_help="Summary information about the organization\'s audit trail.")
def audit_summary_retrieve(
    _api_host: _a.ApiHostOption = "",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
) -> None:
    '''
    Summary information about the organization's audit trail.
    '''
    # handler for audit_summary_retrieve: GET /api/v1/audit/summary/
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key)
    url = _r.create_url(_api_host, "api/v1/audit/summary/")
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}

    try:
        data = _r.request("GET", url, headers=headers, params=params, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


if __name__ == "__main__":
    app()
