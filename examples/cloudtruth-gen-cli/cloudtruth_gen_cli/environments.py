#!/usr/bin/env python3
# Copyright 2025
#
# This code was generated by the openapi-spec-tools CLI generator, DO NOT EDIT
#

from datetime import date  # noqa: F401
from datetime import datetime  # noqa: F401
from enum import Enum  # noqa: F401
from pathlib import Path
from typing import Annotated  # noqa: F401
from typing import Optional  # noqa: F401

import typer

from cloudtruth_gen_cli import _arguments as _a
from cloudtruth_gen_cli import _display as _d  # noqa: F401
from cloudtruth_gen_cli import _exceptions as _e  # noqa: F401
from cloudtruth_gen_cli import _logging as _l  # noqa: F401
from cloudtruth_gen_cli import _requests as _r  # noqa: F401
from cloudtruth_gen_cli import _tree as _t
from cloudtruth_gen_cli.environments_tags import app as environments_tags

app = typer.Typer(no_args_is_help=True, help="Manage CloudTruth environments")
app.add_typer(environments_tags, name="tags")


@app.command("commands", short_help="Display commands tree for environment sub-commands")
def show_commands(
    display: _a.TreeDisplayOption = _a.TreeDisplay.HELP,
    depth: _a.MaxDepthOption = 5,
) -> None:
    """Show environment sub-commands.
    
    The '*' denotes a sub-command with other sub-commands, but no direct actions.
    """
    path = Path(__file__).parent / "tree.yaml"
    _t.tree(path.as_posix(), "environments", display, depth)
    return


@app.command("create", short_help="")
def environments_create(
    name: Annotated[str, typer.Option(show_default=False, help="The environment name.")] = None,
    description: Annotated[Optional[str], typer.Option(show_default=False, help="A description of the environment.  You may find it helpful to document how this environment is used to assist others when they need to maintain software that uses this content.")] = None,
    parent: Annotated[Optional[str], typer.Option(show_default=False, help="Environments can inherit from a single parent environment which provides values for parameters when specific environments do not have a value set.  Every organization has one default environment that cannot be removed.")] = None,
    _api_host: _a.ApiHostOption = "",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
) -> None:
    # handler for environments_create: POST /api/v1/environments/
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key, content_type="application/json")
    url = _r.create_url(_api_host, "api/v1/environments/")
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if name is None:
        missing.append("--name")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}
    body = {}
    body["name"] = name
    if description is not None:
        body["description"] = description
    if parent is not None:
        body["parent"] = parent

    try:
        data = _r.request("POST", url, headers=headers, params=params, body=body, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


@app.command("delete", short_help="")
def environments_destroy(
    id: Annotated[str, typer.Argument(show_default=False, help="A unique identifier for the environment.")],
    _api_host: _a.ApiHostOption = "",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
) -> None:
    # handler for environments_destroy: DELETE /api/v1/environments/{id}/
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key)
    url = _r.create_url(_api_host, "api/v1/environments", id)
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}

    try:
        data = _r.request("DELETE", url, headers=headers, params=params, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


@app.command("list", short_help="")
def environments_list(
    description__icontains: Annotated[Optional[str], typer.Option(show_default=False, help="")] = None,
    name: Annotated[Optional[str], typer.Option(show_default=False, help="")] = None,
    name__icontains: Annotated[Optional[str], typer.Option(show_default=False, help="")] = None,
    ordering: Annotated[Optional[str], typer.Option(show_default=False, help="Which field to use when ordering the results.")] = None,
    page: Annotated[Optional[int], typer.Option(show_default=False, help="A page number within the paginated result set.")] = None,
    page_size: Annotated[Optional[int], typer.Option(show_default=False, help="Number of results to return per page.")] = None,
    _api_host: _a.ApiHostOption = "",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
    _max_count: _a.MaxCountOption = None,
) -> None:
    # handler for environments_list: GET /api/v1/environments/
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key)
    url = _r.create_url(_api_host, "api/v1/environments/")
    page_info = _r.PageParams(
        max_count=_max_count,
        page_size_name="page_size",
        page_size_value=page_size,
        page_start_name="page",
        page_start_value=page,
        item_property_name="result",
        next_property_name="next",
    )
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}
    if description__icontains is not None:
        params["description__icontains"] = description__icontains
    if name is not None:
        params["name"] = name
    if name__icontains is not None:
        params["name__icontains"] = name__icontains
    if ordering is not None:
        params["ordering"] = ordering
    if page is not None:
        params["page"] = page
    if page_size is not None:
        params["page_size"] = page_size

    try:
        data = _r.depaginate(page_info, url, headers=headers, params=params, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


@app.command("pushes", short_help="List push operations.")
def environments_pushes_list(
    environment_pk: Annotated[str, typer.Argument(show_default=False, help="")],
    ordering: Annotated[Optional[str], typer.Option(show_default=False, help="Which field to use when ordering the results.")] = None,
    page: Annotated[Optional[int], typer.Option(show_default=False, help="A page number within the paginated result set.")] = None,
    page_size: Annotated[Optional[int], typer.Option(show_default=False, help="Number of results to return per page.")] = None,
    _api_host: _a.ApiHostOption = "",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
    _max_count: _a.MaxCountOption = None,
) -> None:
    '''
    The push operations that this environment was involved in.
    '''
    # handler for environments_pushes_list: GET /api/v1/environments/{environment_pk}/pushes/
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key)
    url = _r.create_url(_api_host, "api/v1/environments", environment_pk, "pushes/")
    page_info = _r.PageParams(
        max_count=_max_count,
        page_size_name="page_size",
        page_size_value=page_size,
        page_start_name="page",
        page_start_value=page,
        item_property_name="result",
        next_property_name="next",
    )
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}
    if ordering is not None:
        params["ordering"] = ordering
    if page is not None:
        params["page"] = page
    if page_size is not None:
        params["page_size"] = page_size

    try:
        data = _r.depaginate(page_info, url, headers=headers, params=params, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


@app.command("set", short_help="")
def environments_update(
    id: Annotated[str, typer.Argument(show_default=False, help="A unique identifier for the environment.")],
    name: Annotated[str, typer.Option(show_default=False, help="The environment name.")] = None,
    description: Annotated[Optional[str], typer.Option(show_default=False, help="A description of the environment.  You may find it helpful to document how this environment is used to assist others when they need to maintain software that uses this content.")] = None,
    parent: Annotated[Optional[str], typer.Option(show_default=False, help="Environments can inherit from a single parent environment which provides values for parameters when specific environments do not have a value set.  Every organization has one default environment that cannot be removed.")] = None,
    access_controlled: Annotated[Optional[bool], typer.Option(show_default=False, help="Indicates if access control is being enforced through grants.")] = None,
    _api_host: _a.ApiHostOption = "",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
) -> None:
    # handler for environments_update: PUT /api/v1/environments/{id}/
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key, content_type="application/json")
    url = _r.create_url(_api_host, "api/v1/environments", id)
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if name is None:
        missing.append("--name")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}
    body = {}
    body["name"] = name
    if description is not None:
        body["description"] = description
    if parent is not None:
        body["parent"] = parent
    if access_controlled is not None:
        body["access_controlled"] = access_controlled

    try:
        data = _r.request("PUT", url, headers=headers, params=params, body=body, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


@app.command("show", short_help="")
def environments_retrieve(
    id: Annotated[str, typer.Argument(show_default=False, help="A UUID string identifying this environment ledger.")],
    _api_host: _a.ApiHostOption = "",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
) -> None:
    # handler for environments_retrieve: GET /api/v1/environments/{id}/
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key)
    url = _r.create_url(_api_host, "api/v1/environments", id)
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}

    try:
        data = _r.request("GET", url, headers=headers, params=params, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


@app.command("update", short_help="")
def environments_partial_update(
    id: Annotated[str, typer.Argument(show_default=False, help="A unique identifier for the environment.")],
    name: Annotated[Optional[str], typer.Option(show_default=False, help="The environment name.")] = None,
    description: Annotated[Optional[str], typer.Option(show_default=False, help="A description of the environment.  You may find it helpful to document how this environment is used to assist others when they need to maintain software that uses this content.")] = None,
    parent: Annotated[Optional[str], typer.Option(show_default=False, help="Environments can inherit from a single parent environment which provides values for parameters when specific environments do not have a value set.  Every organization has one default environment that cannot be removed.")] = None,
    access_controlled: Annotated[Optional[bool], typer.Option(show_default=False, help="Indicates if access control is being enforced through grants.")] = None,
    _api_host: _a.ApiHostOption = "",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
) -> None:
    # handler for environments_partial_update: PATCH /api/v1/environments/{id}/
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key, content_type="application/json")
    url = _r.create_url(_api_host, "api/v1/environments", id)
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}
    body = {}
    if name is not None:
        body["name"] = name
    if description is not None:
        body["description"] = description
    if parent is not None:
        body["parent"] = parent
    if access_controlled is not None:
        body["access_controlled"] = access_controlled

    try:
        data = _r.request("PATCH", url, headers=headers, params=params, body=body, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


if __name__ == "__main__":
    app()
