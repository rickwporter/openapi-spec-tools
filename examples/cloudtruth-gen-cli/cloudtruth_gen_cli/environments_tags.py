#!/usr/bin/env python3
# Copyright 2025
#
# This code was generated by the openapi-spec-tools CLI generator, DO NOT EDIT
#

from datetime import date  # noqa: F401
from datetime import datetime  # noqa: F401
from enum import Enum  # noqa: F401
from pathlib import Path
from typing import Annotated  # noqa: F401
from typing import Optional  # noqa: F401

import typer

from cloudtruth_gen_cli import _arguments as _a
from cloudtruth_gen_cli import _display as _d  # noqa: F401
from cloudtruth_gen_cli import _exceptions as _e  # noqa: F401
from cloudtruth_gen_cli import _logging as _l  # noqa: F401
from cloudtruth_gen_cli import _requests as _r  # noqa: F401
from cloudtruth_gen_cli import _tree as _t


app = typer.Typer(no_args_is_help=True, help="Manage environment tags")

@app.command("commands", short_help="Display commands tree for sub-commands")
def show_commands(
    display: _a.TreeDisplayOption = _a.TreeDisplay.HELP,
    depth: _a.MaxDepthOption = 5,
) -> None:
    path = Path(__file__).parent / "tree.yaml"
    _t.tree(path.as_posix(), "environments_tags", display, depth)
    return


@app.command("create", short_help="Tags allow you to name stable points for your configuration.")
def environments_tags_create(
    environment_pk: Annotated[str, typer.Argument(show_default=False, help="")],
    name: Annotated[str, typer.Option(show_default=False, help="The tag name. Tag names may contain alphanumeric, hyphen, underscore, or period characters. Tag names are case sensitive. The name cannot be modified.")] = None,
    description: Annotated[Optional[str], typer.Option(show_default=False, help="A description of the tag.  You may find it helpful to document how this tag is used to assist others when they need to maintain software that uses this content.")] = None,
    timestamp: Annotated[Optional[datetime], typer.Option(show_default=False, help="The point in time this tag represents. If not specified then the current time will be used.")] = None,
    immutable: Annotated[Optional[bool], typer.Option(show_default=False, help="If True, this tag cannot be modified once it is created.")] = None,
    _api_host: _a.ApiHostOption = "",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
) -> None:
    '''
    Tags allow you to name stable points for your configuration.

    Any query API that accepts an `as_of` option will also accept a `tag`
    option however they are mutually exclusive.
    '''
    # handler for environments_tags_create: POST /api/v1/environments/{environment_pk}/tags/
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key, content_type="application/json")
    url = _r.create_url(_api_host, "api/v1/environments", environment_pk, "tags/")
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if name is None:
        missing.append("--name")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}
    body = {}
    body["name"] = name
    if description is not None:
        body["description"] = description
    if timestamp is not None:
        body["timestamp"] = timestamp
    if immutable is not None:
        body["immutable"] = immutable

    try:
        data = _r.request("POST", url, headers=headers, params=params, body=body, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


@app.command("delete", short_help="Tags allow you to name stable points for your configuration.")
def environments_tags_destroy(
    environment_pk: Annotated[str, typer.Argument(show_default=False, help="")],
    id: Annotated[str, typer.Argument(show_default=False, help="A unique identifier for the tag.")],
    _api_host: _a.ApiHostOption = "",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
) -> None:
    '''
    Tags allow you to name stable points for your configuration.

    Any query API that accepts an `as_of` option will also accept a `tag`
    option however they are mutually exclusive.
    '''
    # handler for environments_tags_destroy: DELETE /api/v1/environments/{environment_pk}/tags/{id}/
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key)
    url = _r.create_url(_api_host, "api/v1/environments", environment_pk, "tags", id)
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}

    try:
        data = _r.request("DELETE", url, headers=headers, params=params, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


@app.command("list", short_help="Tags allow you to name stable points for your configuration.")
def environments_tags_list(
    environment_pk: Annotated[str, typer.Argument(show_default=False, help="")],
    description__icontains: Annotated[Optional[str], typer.Option(show_default=False, help="")] = None,
    name: Annotated[Optional[str], typer.Option(show_default=False, help="")] = None,
    name__icontains: Annotated[Optional[str], typer.Option(show_default=False, help="")] = None,
    ordering: Annotated[Optional[str], typer.Option(show_default=False, help="Which field to use when ordering the results.")] = None,
    page: Annotated[Optional[int], typer.Option(show_default=False, help="A page number within the paginated result set.")] = None,
    page_size: Annotated[Optional[int], typer.Option(show_default=False, help="Number of results to return per page.")] = None,
    timestamp: Annotated[Optional[datetime], typer.Option(show_default=False, help="")] = None,
    timestamp__gte: Annotated[Optional[datetime], typer.Option(show_default=False, help="")] = None,
    timestamp__lte: Annotated[Optional[datetime], typer.Option(show_default=False, help="")] = None,
    _api_host: _a.ApiHostOption = "",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
    _max_count: _a.MaxCountOption = None,
) -> None:
    '''
    Tags allow you to name stable points for your configuration.

    Any query API that accepts an `as_of` option will also accept a `tag`
    option however they are mutually exclusive.
    '''
    # handler for environments_tags_list: GET /api/v1/environments/{environment_pk}/tags/
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key)
    url = _r.create_url(_api_host, "api/v1/environments", environment_pk, "tags/")
    page_info = _r.PageParams(max_count=_max_count, page_size_name="page_size", page_size_value=page_size, page_start_name="page", page_start_value=page, item_property_name="result", next_property_name="next")
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}
    if description__icontains is not None:
        params["description__icontains"] = description__icontains
    if name is not None:
        params["name"] = name
    if name__icontains is not None:
        params["name__icontains"] = name__icontains
    if ordering is not None:
        params["ordering"] = ordering
    if page is not None:
        params["page"] = page
    if page_size is not None:
        params["page_size"] = page_size
    if timestamp is not None:
        params["timestamp"] = timestamp
    if timestamp__gte is not None:
        params["timestamp__gte"] = timestamp__gte
    if timestamp__lte is not None:
        params["timestamp__lte"] = timestamp__lte

    try:
        data = _r.depaginate(page_info, url, headers=headers, params=params, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


@app.command("set", short_help="Tags allow you to name stable points for your configuration.")
def environments_tags_update(
    environment_pk: Annotated[str, typer.Argument(show_default=False, help="")],
    id: Annotated[str, typer.Argument(show_default=False, help="A unique identifier for the tag.")],
    name: Annotated[str, typer.Option(show_default=False, help="The tag name. Tag names may contain alphanumeric, hyphen, underscore, or period characters. Tag names are case sensitive. The name cannot be modified.")] = None,
    description: Annotated[Optional[str], typer.Option(show_default=False, help="A description of the tag.  You may find it helpful to document how this tag is used to assist others when they need to maintain software that uses this content.")] = None,
    timestamp: Annotated[Optional[datetime], typer.Option(show_default=False, help="The point in time this tag represents.  If explicitly set to `null` then the current time will be used.")] = None,
    immutable: Annotated[Optional[bool], typer.Option(show_default=False, help="If True, this tag cannot be modified once it is created.")] = None,
    _api_host: _a.ApiHostOption = "",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
) -> None:
    '''
    Tags allow you to name stable points for your configuration.

    Any query API that accepts an `as_of` option will also accept a `tag`
    option however they are mutually exclusive.
    '''
    # handler for environments_tags_update: PUT /api/v1/environments/{environment_pk}/tags/{id}/
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key, content_type="application/json")
    url = _r.create_url(_api_host, "api/v1/environments", environment_pk, "tags", id)
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if name is None:
        missing.append("--name")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}
    body = {}
    body["name"] = name
    if description is not None:
        body["description"] = description
    if timestamp is not None:
        body["timestamp"] = timestamp
    if immutable is not None:
        body["immutable"] = immutable

    try:
        data = _r.request("PUT", url, headers=headers, params=params, body=body, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


@app.command("show", short_help="Tags allow you to name stable points for your configuration.")
def environments_tags_retrieve(
    environment_pk: Annotated[str, typer.Argument(show_default=False, help="")],
    id: Annotated[str, typer.Argument(show_default=False, help="A unique identifier for the tag.")],
    _api_host: _a.ApiHostOption = "",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
) -> None:
    '''
    Tags allow you to name stable points for your configuration.

    Any query API that accepts an `as_of` option will also accept a `tag`
    option however they are mutually exclusive.
    '''
    # handler for environments_tags_retrieve: GET /api/v1/environments/{environment_pk}/tags/{id}/
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key)
    url = _r.create_url(_api_host, "api/v1/environments", environment_pk, "tags", id)
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}

    try:
        data = _r.request("GET", url, headers=headers, params=params, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


@app.command("update", short_help="Tags allow you to name stable points for your configuration.")
def environments_tags_partial_update(
    environment_pk: Annotated[str, typer.Argument(show_default=False, help="")],
    id: Annotated[str, typer.Argument(show_default=False, help="A unique identifier for the tag.")],
    name: Annotated[Optional[str], typer.Option(show_default=False, help="The tag name. Tag names may contain alphanumeric, hyphen, underscore, or period characters. Tag names are case sensitive. The name cannot be modified.")] = None,
    description: Annotated[Optional[str], typer.Option(show_default=False, help="A description of the tag.  You may find it helpful to document how this tag is used to assist others when they need to maintain software that uses this content.")] = None,
    timestamp: Annotated[Optional[datetime], typer.Option(show_default=False, help="The point in time this tag represents.  If explicitly set to `null` then the current time will be used.")] = None,
    immutable: Annotated[Optional[bool], typer.Option(show_default=False, help="If True, this tag cannot be modified once it is created.")] = None,
    _api_host: _a.ApiHostOption = "",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
) -> None:
    '''
    Tags allow you to name stable points for your configuration.

    Any query API that accepts an `as_of` option will also accept a `tag`
    option however they are mutually exclusive.
    '''
    # handler for environments_tags_partial_update: PATCH /api/v1/environments/{environment_pk}/tags/{id}/
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key, content_type="application/json")
    url = _r.create_url(_api_host, "api/v1/environments", environment_pk, "tags", id)
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}
    body = {}
    if name is not None:
        body["name"] = name
    if description is not None:
        body["description"] = description
    if timestamp is not None:
        body["timestamp"] = timestamp
    if immutable is not None:
        body["immutable"] = immutable

    try:
        data = _r.request("PATCH", url, headers=headers, params=params, body=body, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


if __name__ == "__main__":
    app()
