#!/usr/bin/env python3
# Copyright 2025
#
# This code was generated by the openapi-spec-tools CLI generator, DO NOT EDIT
#

from datetime import date  # noqa: F401
from datetime import datetime  # noqa: F401
from enum import Enum  # noqa: F401
from pathlib import Path
from typing import Annotated  # noqa: F401
from typing import Optional  # noqa: F401

import typer

from cloudtruth_gen_cli import _arguments as _a
from cloudtruth_gen_cli import _display as _d  # noqa: F401
from cloudtruth_gen_cli import _exceptions as _e  # noqa: F401
from cloudtruth_gen_cli import _logging as _l  # noqa: F401
from cloudtruth_gen_cli import _requests as _r  # noqa: F401
from cloudtruth_gen_cli import _tree as _t
from cloudtruth_gen_cli.audit import app as audit
from cloudtruth_gen_cli.environments import app as environments
from cloudtruth_gen_cli.grants import app as grants
from cloudtruth_gen_cli.memberships import app as memberships
from cloudtruth_gen_cli.users import app as users

app = typer.Typer(no_args_is_help=True, help="Manage CloudTruth application")
app.add_typer(audit, name="audit")
app.add_typer(environments, name="environment")
app.add_typer(grants, name="grants")
app.add_typer(memberships, name="membership")
app.add_typer(users, name="user")


@app.command("commands", short_help="Display commands tree for main sub-commands")
def show_commands(
    display: _a.TreeDisplayOption = _a.TreeDisplay.HELP,
    depth: _a.MaxDepthOption = 5,
) -> None:
    """Show main sub-commands.
    
    The '*' denotes a sub-command with other sub-commands, but no direct actions.
    """
    path = Path(__file__).parent / "tree.yaml"
    _t.tree(path.as_posix(), "main", display, depth)
    return


@app.command("backup", short_help="Get a snapshot of all Projects with parameters")
def backup_snapshot_create(
    _api_host: _a.ApiHostOption = "",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
) -> None:
    '''
    Get a snapshot of all Projects with parameters
    '''
    # handler for backup_snapshot_create: POST /api/v1/backup/snapshot/
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key)
    url = _r.create_url(_api_host, "api/v1/backup/snapshot/")
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}

    try:
        data = _r.request("POST", url, headers=headers, params=params, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


@app.command("generate-password", short_help="Get a randomly generated password using AWS Secrets Manager, with fallback to /dev/urandom.")
def utils_generate_password_create(
    length: Annotated[Optional[int], typer.Option(show_default=False, help="The length of the password to generate.  Minimum of 8, maximum of 4095.")] = None,
    require_hardware_generation: Annotated[bool, typer.Option(help="Default behavior is to fallback to /dev/urandom if we fail to get a random password from AWS Secrets Manager.  If set to \'True\', we will not fallback to local password generation using /dev/urandom.  Default: False")] = False,
    require_lowercase: Annotated[bool, typer.Option(help="The password must include lowercase letters [a-z]. Default: True.")] = True,
    require_numbers: Annotated[bool, typer.Option(help="The password must include numbers [0-9].  Default: True.")] = True,
    require_spaces: Annotated[bool, typer.Option(help="The password must include spaces [ ].  Default: False.")] = False,
    require_symbols: Annotated[bool, typer.Option(help="The password must include symbols [!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~].  Default: False.")] = False,
    require_uppercase: Annotated[bool, typer.Option(help="The password must include uppercase letters [A-Z].  Default: True.")] = True,
    _api_host: _a.ApiHostOption = "",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
) -> None:
    '''
    Endpoint for accessing utility functions
    '''
    # handler for utils_generate_password_create: POST /api/v1/utils/generate_password/
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key)
    url = _r.create_url(_api_host, "api/v1/utils/generate_password/")
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if length is None:
        missing.append("--length")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}
    params["length"] = length
    if require_hardware_generation is not None:
        params["require_hardware_generation"] = require_hardware_generation
    if require_lowercase is not None:
        params["require_lowercase"] = require_lowercase
    if require_numbers is not None:
        params["require_numbers"] = require_numbers
    if require_spaces is not None:
        params["require_spaces"] = require_spaces
    if require_symbols is not None:
        params["require_symbols"] = require_symbols
    if require_uppercase is not None:
        params["require_uppercase"] = require_uppercase

    try:
        data = _r.request("POST", url, headers=headers, params=params, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


if __name__ == "__main__":
    app()
