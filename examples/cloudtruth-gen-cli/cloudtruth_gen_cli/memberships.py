#!/usr/bin/env python3
# Copyright 2025
#
# This code was generated by the openapi-spec-tools CLI generator, DO NOT EDIT
#

from datetime import date  # noqa: F401
from datetime import datetime  # noqa: F401
from enum import Enum  # noqa: F401
from pathlib import Path
from typing import Annotated  # noqa: F401
from typing import Optional  # noqa: F401

import typer

from cloudtruth_gen_cli import _arguments as _a
from cloudtruth_gen_cli import _display as _d  # noqa: F401
from cloudtruth_gen_cli import _exceptions as _e  # noqa: F401
from cloudtruth_gen_cli import _logging as _l  # noqa: F401
from cloudtruth_gen_cli import _requests as _r  # noqa: F401
from cloudtruth_gen_cli import _tree as _t


app = typer.Typer(no_args_is_help=True, help="Manage CloudTruth memberships")

@app.command("commands", short_help="Display commands tree for sub-commands")
def show_commands(
    display: _a.TreeDisplayOption = _a.TreeDisplay.HELP,
    depth: _a.MaxDepthOption = 5,
) -> None:
    path = Path(__file__).parent / "tree.yaml"
    _t.tree(path.as_posix(), "memberships", display, depth)
    return


class RoleEnum(str, Enum):  # noqa: F811
    OWNER = "OWNER"
    ADMIN = "ADMIN"
    CONTRIB = "CONTRIB"
    VIEWER = "VIEWER"


@app.command("create", short_help="")
def memberships_create(
    user: Annotated[str, typer.Option(show_default=False, help="The user of the membership.")] = None,
    role: Annotated[RoleEnum, typer.Option(show_default=False, case_sensitive=False, help="The role that the user has in the organization.")] = None,
    _api_host: _a.ApiHostOption = "",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
) -> None:
    # handler for memberships_create: POST /api/v1/memberships/
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key, content_type="application/json")
    url = _r.create_url(_api_host, "api/v1/memberships/")
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if user is None:
        missing.append("--user")
    if role is None:
        missing.append("--role")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}
    body = {}
    body["user"] = user
    body["role"] = role

    try:
        data = _r.request("POST", url, headers=headers, params=params, body=body, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


@app.command("delete", short_help="")
def memberships_destroy(
    id: Annotated[str, typer.Argument(show_default=False, help="A unique identifier for the membership.")],
    _api_host: _a.ApiHostOption = "",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
) -> None:
    # handler for memberships_destroy: DELETE /api/v1/memberships/{id}/
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key)
    url = _r.create_url(_api_host, "api/v1/memberships", id)
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}

    try:
        data = _r.request("DELETE", url, headers=headers, params=params, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


class Role(str, Enum):  # noqa: F811
    ADMIN = "ADMIN"
    CONTRIB = "CONTRIB"
    OWNER = "OWNER"
    VIEWER = "VIEWER"


@app.command("list", short_help="")
def memberships_list(
    ordering: Annotated[Optional[str], typer.Option(show_default=False, help="Which field to use when ordering the results.")] = None,
    page: Annotated[Optional[int], typer.Option(show_default=False, help="A page number within the paginated result set.")] = None,
    page_size: Annotated[Optional[int], typer.Option(show_default=False, help="Number of results to return per page.")] = None,
    role: Annotated[Optional[Role], typer.Option(show_default=False, case_sensitive=False, help="The role that the user has in the organization.")] = None,
    user: Annotated[Optional[str], typer.Option(show_default=False, help="The unique identifier of a user.")] = None,
    _api_host: _a.ApiHostOption = "",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
    _max_count: _a.MaxCountOption = None,
) -> None:
    # handler for memberships_list: GET /api/v1/memberships/
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key)
    url = _r.create_url(_api_host, "api/v1/memberships/")
    page_info = _r.PageParams(
        max_count=_max_count,
        page_size_name="page_size",
        page_size_value=page_size,
        page_start_name="page",
        page_start_value=page,
        item_property_name="result",
        next_property_name="next",
    )
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}
    if ordering is not None:
        params["ordering"] = ordering
    if page is not None:
        params["page"] = page
    if page_size is not None:
        params["page_size"] = page_size
    if role is not None:
        params["role"] = role
    if user is not None:
        params["user"] = user

    try:
        data = _r.depaginate(page_info, url, headers=headers, params=params, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


class RoleEnum(str, Enum):  # noqa: F811
    OWNER = "OWNER"
    ADMIN = "ADMIN"
    CONTRIB = "CONTRIB"
    VIEWER = "VIEWER"


@app.command("set", short_help="")
def memberships_update(
    id: Annotated[str, typer.Argument(show_default=False, help="A unique identifier for the membership.")],
    user: Annotated[str, typer.Option(show_default=False, help="The user of the membership.")] = None,
    organization: Annotated[str, typer.Option(show_default=False, help="The organization that the user is a member of.")] = None,
    role: Annotated[RoleEnum, typer.Option(show_default=False, case_sensitive=False, help="The role that the user has in the organization.")] = None,
    _api_host: _a.ApiHostOption = "",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
) -> None:
    # handler for memberships_update: PUT /api/v1/memberships/{id}/
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key, content_type="application/json")
    url = _r.create_url(_api_host, "api/v1/memberships", id)
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if user is None:
        missing.append("--user")
    if organization is None:
        missing.append("--organization")
    if role is None:
        missing.append("--role")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}
    body = {}
    body["user"] = user
    body["organization"] = organization
    body["role"] = role

    try:
        data = _r.request("PUT", url, headers=headers, params=params, body=body, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


@app.command("show", short_help="")
def memberships_retrieve(
    id: Annotated[str, typer.Argument(show_default=False, help="A unique identifier for the membership.")],
    _api_host: _a.ApiHostOption = "",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
) -> None:
    # handler for memberships_retrieve: GET /api/v1/memberships/{id}/
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key)
    url = _r.create_url(_api_host, "api/v1/memberships", id)
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}

    try:
        data = _r.request("GET", url, headers=headers, params=params, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


class RoleEnum(str, Enum):  # noqa: F811
    OWNER = "OWNER"
    ADMIN = "ADMIN"
    CONTRIB = "CONTRIB"
    VIEWER = "VIEWER"


@app.command("update", short_help="")
def memberships_partial_update(
    id: Annotated[str, typer.Argument(show_default=False, help="A unique identifier for the membership.")],
    user: Annotated[Optional[str], typer.Option(show_default=False, help="The user of the membership.")] = None,
    organization: Annotated[Optional[str], typer.Option(show_default=False, help="The organization that the user is a member of.")] = None,
    role: Annotated[Optional[RoleEnum], typer.Option(show_default=False, case_sensitive=False, help="The role that the user has in the organization.")] = None,
    _api_host: _a.ApiHostOption = "",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
) -> None:
    # handler for memberships_partial_update: PATCH /api/v1/memberships/{id}/
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key, content_type="application/json")
    url = _r.create_url(_api_host, "api/v1/memberships", id)
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}
    body = {}
    if user is not None:
        body["user"] = user
    if organization is not None:
        body["organization"] = organization
    if role is not None:
        body["role"] = role

    try:
        data = _r.request("PATCH", url, headers=headers, params=params, body=body, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


if __name__ == "__main__":
    app()
