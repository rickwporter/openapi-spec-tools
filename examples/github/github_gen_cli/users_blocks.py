#!/usr/bin/env python3
# Copyright 2025
#
# This code was generated by the openapi-spec-tools CLI generator, DO NOT EDIT
#

from datetime import date  # noqa: F401
from datetime import datetime  # noqa: F401
from enum import Enum  # noqa: F401
from pathlib import Path
from typing import Annotated  # noqa: F401
from typing import Optional  # noqa: F401

import typer

from github_gen_cli import _arguments as _a
from github_gen_cli import _display as _d  # noqa: F401
from github_gen_cli import _exceptions as _e  # noqa: F401
from github_gen_cli import _logging as _l  # noqa: F401
from github_gen_cli import _requests as _r  # noqa: F401
from github_gen_cli import _tree as _t


app = typer.Typer(no_args_is_help=True, help="Managed blocked users")

@app.command("commands", short_help="Display commands tree for sub-commands")
def show_commands(
    display: _a.TreeDisplayOption = _a.TreeDisplay.HELP,
    depth: _a.MaxDepthOption = 5,
) -> None:
    path = Path(__file__).parent / "tree.yaml"
    _t.tree(path.as_posix(), "users_blocks", display, depth)
    return


@app.command("list", short_help="List users blocked by the authenticated user")
def users_list_blocked_by_authenticated_user(
    per_page: Annotated[int, typer.Option(help="The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"")] = 30,
    page: Annotated[int, typer.Option(help="The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"")] = 1,
    _api_host: _a.ApiHostOption = "https://api.github.com",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
    _max_count: _a.MaxCountOption = None,
) -> None:
    '''
    List the users you've blocked on your personal account.
    '''
    # handler for users/list-blocked-by-authenticated-user: GET /user/blocks
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key)
    url = _r.create_url(_api_host, "user/blocks")
    page_info = _r.PageParams(
        max_count=_max_count,
        page_size_name="per-page",
        page_size_value=per_page,
        page_start_name="page",
        page_start_value=page,
    )
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}
    if per_page is not None:
        params["per_page"] = per_page
    if page is not None:
        params["page"] = page

    try:
        data = _r.depaginate(page_info, url, headers=headers, params=params, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


if __name__ == "__main__":
    app()
