#!/usr/bin/env python3
# Copyright 2025
#
# This code was generated by the openapi-spec-tools CLI generator, DO NOT EDIT
#

from datetime import date  # noqa: F401
from datetime import datetime  # noqa: F401
from enum import Enum  # noqa: F401
from pathlib import Path
from typing import Annotated  # noqa: F401
from typing import Optional  # noqa: F401

import typer

from github_gen_cli import _arguments as _a
from github_gen_cli import _display as _d  # noqa: F401
from github_gen_cli import _exceptions as _e  # noqa: F401
from github_gen_cli import _logging as _l  # noqa: F401
from github_gen_cli import _requests as _r  # noqa: F401
from github_gen_cli import _tree as _t
from github_gen_cli.users_blocks import app as users_blocks

app = typer.Typer(no_args_is_help=True, help="Manage GitHub users")
app.add_typer(users_blocks, name="blocks")


@app.command("commands", short_help="Display commands tree for users sub-commands")
def show_commands(
    display: _a.TreeDisplayOption = _a.TreeDisplay.HELP,
    depth: _a.MaxDepthOption = 5,
) -> None:
    """Show users sub-commands.
    
    The '*' denotes a sub-command with other sub-commands, but no direct actions.
    """
    path = Path(__file__).parent / "tree.yaml"
    _t.tree(path.as_posix(), "users", display, depth)
    return


@app.command("attestations", short_help="List attestations")
def users_list_attestations(
    username: Annotated[str, typer.Argument(show_default=False, help="The handle for the GitHub user account.")],
    subject_digest: Annotated[str, typer.Argument(show_default=False, help="Subject Digest")],
    per_page: Annotated[int, typer.Option(help="The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"")] = 30,
    before: Annotated[Optional[str], typer.Option(show_default=False, help="A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"")] = None,
    after: Annotated[Optional[str], typer.Option(show_default=False, help="A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"")] = None,
    predicate_type: Annotated[Optional[str], typer.Option(show_default=False, help="Optional filter for fetching attestations with a given predicate type.")] = None,
    _api_host: _a.ApiHostOption = "https://api.github.com",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
    _max_count: _a.MaxCountOption = None,
) -> None:
    '''
    List a collection of artifact attestations with a given subject digest that are associated with repositories owned by a
    user.

    The collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions;
    if the authenticated user cannot read a repository, the attestations associated with that repository will not be
    included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is
    required.

    **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be
    cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be
    verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For
    more information, see [our guide on how to use artifact attestations to establish a build's
    provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-
    builds).
    '''
    # handler for users/list-attestations: GET /users/{username}/attestations/{subject_digest}
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key)
    url = _r.create_url(_api_host, "users", username, "attestations", subject_digest)
    page_info = _r.PageParams(
        max_count=_max_count,
        page_size_name="per-page",
        page_size_value=per_page,
    )
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}
    if per_page is not None:
        params["per_page"] = per_page
    if before is not None:
        params["before"] = before
    if after is not None:
        params["after"] = after
    if predicate_type is not None:
        params["predicate_type"] = predicate_type

    try:
        data = _r.depaginate(page_info, url, headers=headers, params=params, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


@app.command("current", short_help="Get the authenticated user")
def users_get_authenticated(
    _api_host: _a.ApiHostOption = "https://api.github.com",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
) -> None:
    '''
    OAuth app tokens and personal access tokens (classic) need the `user` scope in order for the response to include private
    profile information.
    '''
    # handler for users/get-authenticated: GET /user
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key)
    url = _r.create_url(_api_host, "user")
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}

    try:
        data = _r.request("GET", url, headers=headers, params=params, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


@app.command("list", short_help="List users")
def users_list(
    since: Annotated[Optional[int], typer.Option(show_default=False, help="A user ID. Only return users with an ID greater than this ID.")] = None,
    per_page: Annotated[int, typer.Option(help="The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"")] = 30,
    _api_host: _a.ApiHostOption = "https://api.github.com",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
    _max_count: _a.MaxCountOption = None,
) -> None:
    '''
    Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization
    accounts.

    Note: Pagination is powered exclusively by the `since` parameter. Use the [Link
    header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the
    next page of users.
    '''
    # handler for users/list: GET /users
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key)
    url = _r.create_url(_api_host, "users")
    page_info = _r.PageParams(
        max_count=_max_count,
        page_size_name="per-page",
        page_size_value=per_page,
    )
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}
    if since is not None:
        params["since"] = since
    if per_page is not None:
        params["per_page"] = per_page

    try:
        data = _r.depaginate(page_info, url, headers=headers, params=params, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


@app.command("show-by-id", short_help="Get a user using their ID")
def users_get_by_id(
    account_id: Annotated[int, typer.Argument(show_default=False, help="account_id parameter")],
    _api_host: _a.ApiHostOption = "https://api.github.com",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
) -> None:
    '''
    Provides publicly available information about someone with a GitHub account. This method takes their durable user `ID`
    instead of their `login`, which can change over time.

    If you are requesting information about an [Enterprise Managed User](https://docs.github.com/enterprise-
    cloud@latest/admin/managing-iam/understanding-iam-for-enterprises/about-enterprise-managed-users), or a GitHub App bot
    that is installed in an organization that uses Enterprise Managed Users, your requests must be authenticated as a user
    or GitHub App that has access to the organization to view that account's information. If you are not authorized, the
    request will return a `404 Not Found` status.

    The `email` key in the following response is the publicly visible email address from your GitHub [profile
    page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be
    public which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it
    will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more
    information, see [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication).

    The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For
    more information, see [Emails API](https://docs.github.com/rest/users/emails).
    '''
    # handler for users/get-by-id: GET /user/{account_id}
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key)
    url = _r.create_url(_api_host, "user", account_id)
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}

    try:
        data = _r.request("GET", url, headers=headers, params=params, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


@app.command("show-by-name", short_help="Get a user")
def users_get_by_username(
    username: Annotated[str, typer.Argument(show_default=False, help="The handle for the GitHub user account.")],
    _api_host: _a.ApiHostOption = "https://api.github.com",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
) -> None:
    '''
    Provides publicly available information about someone with a GitHub account.

    If you are requesting information about an [Enterprise Managed User](https://docs.github.com/enterprise-
    cloud@latest/admin/managing-iam/understanding-iam-for-enterprises/about-enterprise-managed-users), or a GitHub App bot
    that is installed in an organization that uses Enterprise Managed Users, your requests must be authenticated as a user
    or GitHub App that has access to the organization to view that account's information. If you are not authorized, the
    request will return a `404 Not Found` status.

    The `email` key in the following response is the publicly visible email address from your GitHub [profile
    page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be
    public which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it
    will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more
    information, see [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication).

    The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For
    more information, see [Emails API](https://docs.github.com/rest/users/emails).
    '''
    # handler for users/get-by-username: GET /users/{username}
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key)
    url = _r.create_url(_api_host, "users", username)
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}

    try:
        data = _r.request("GET", url, headers=headers, params=params, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


if __name__ == "__main__":
    app()
