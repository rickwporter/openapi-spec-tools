#!/usr/bin/env python3
# Copyright 2025
#
# This code was generated by the openapi-spec-tools CLI generator, DO NOT EDIT
#

from datetime import date  # noqa: F401
from datetime import datetime  # noqa: F401
from enum import Enum  # noqa: F401
from pathlib import Path
from typing import Annotated  # noqa: F401
from typing import Optional  # noqa: F401

import typer

from pets_cli import _arguments as _a
from pets_cli import _display as _d  # noqa: F401
from pets_cli import _exceptions as _e  # noqa: F401
from pets_cli import _logging as _l  # noqa: F401
from pets_cli import _requests as _r  # noqa: F401
from pets_cli import _tree as _t


app = typer.Typer(no_args_is_help=True, help="Manage pets")


@app.command("commands", short_help="Display commands tree for main sub-commands")
def show_commands(
    display: _a.TreeDisplayOption = _a.TreeDisplay.HELP,
    depth: _a.MaxDepthOption = 5,
) -> None:
    """Show main sub-commands.
    
    The '*' denotes a sub-command with other sub-commands, but no direct actions.
    """
    path = Path(__file__).parent / "tree.yaml"
    _t.tree(path.as_posix(), "main", display, depth)
    return


@app.command("add", short_help="Create a pet")
def create_pets(
    id: Annotated[int, typer.Option(show_default=False)] = None,
    name: Annotated[str, typer.Option(show_default=False)] = None,
    tag: Annotated[Optional[str], typer.Option(show_default=False)] = None,
    owner: Annotated[str, typer.Option(show_default=False)] = None,
    _api_host: _a.ApiHostOption = "http://petstore.swagger.io/v1",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
) -> None:
    '''
    Create a pet
    '''
    # handler for createPets: POST /pets
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key, content_type="application/json")
    url = _r.create_url(_api_host, "pets")
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if id is None:
        missing.append("--id")
    if name is None:
        missing.append("--name")
    if owner is None:
        missing.append("--owner")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}
    body = {}
    body["id"] = id
    body["name"] = name
    if tag is not None:
        body["tag"] = tag
    body["owner"] = owner

    try:
        data = _r.request("POST", url, headers=headers, params=params, body=body, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


@app.command("delete", short_help="Delete a pet")
def delete_pet_by_id(
    pet_id: Annotated[str, typer.Argument(show_default=False, help="The id of the pet to retrieve")],
    _api_host: _a.ApiHostOption = "http://petstore.swagger.io/v1",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
) -> None:
    '''
    Delete a pet
    '''
    # handler for deletePetById: DELETE /pets/{petId}
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key)
    url = _r.create_url(_api_host, "pets", pet_id)
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}

    try:
        data = _r.request("DELETE", url, headers=headers, params=params, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


@app.command("list", short_help="List all pets")
def list_pets(
    limit: Annotated[Optional[int], typer.Option(max=100, show_default=False, help="How many items to return at one time (max 100)")] = None,
    _api_host: _a.ApiHostOption = "http://petstore.swagger.io/v1",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
    _max_count: _a.MaxCountOption = None,
) -> None:
    '''
    List all pets
    '''
    # handler for listPets: GET /pets
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key)
    url = _r.create_url(_api_host, "pets")
    page_info = _r.PageParams(
        max_count=_max_count,
        page_size_name="limit",
        page_size_value=limit,
    )
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}
    if limit is not None:
        params["limit"] = limit

    try:
        data = _r.depaginate(page_info, url, headers=headers, params=params, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


@app.command("show", short_help="Info for a specific pet")
def show_pet_by_id(
    pet_id: Annotated[str, typer.Argument(show_default=False, help="The id of the pet to retrieve")],
    _api_host: _a.ApiHostOption = "http://petstore.swagger.io/v1",
    _api_key: _a.ApiKeyOption = None,
    _api_timeout: _a.ApiTimeoutOption = 5,
    _log_level: _a.LogLevelOption = _a.LogLevel.WARN,
    _out_fmt: _a.OutputFormatOption = _a.OutputFormat.TABLE,
    _out_style: _a.OutputStyleOption = _a.OutputStyle.ALL,
) -> None:
    '''
    Info for a specific pet
    '''
    # handler for showPetById: GET /pets/{petId}
    _l.init_logging(_log_level)
    headers = _r.request_headers(_api_key)
    url = _r.create_url(_api_host, "pets", pet_id)
    missing = []
    if _api_key is None:
        missing.append("--api-key")
    if missing:
        _e.handle_exceptions(_e.MissingRequiredError(missing))

    params = {}

    try:
        data = _r.request("GET", url, headers=headers, params=params, timemout=_api_timeout)
        _d.display(data, _out_fmt, _out_style)
    except Exception as ex:
        _e.handle_exceptions(ex)

    return


if __name__ == "__main__":
    app()
