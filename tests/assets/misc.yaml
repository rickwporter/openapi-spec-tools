openapi: "3.0.0"
info:
  version: 1.0.0
  title: Test API definition
  license:
    name: MIT
servers:
  - url: http://petstore.swagger.io/v1
paths:
  /pets/{numFeet}/{species}/{neutered}/{birthday}:
    parameters:
      - name: numFeet
        in: path
        description: Number of feet
        required: false
        schema:
          type: integer
      - name: situation
        in: query
        description: Query param at path level, likely unused
        required: true
        schema:
          type: string
          default: anything goes
    get:
      summary: List all pets (optionally of specified species)
      operationId: testPathParams
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            maximum: 100
            minimum: 1
            format: int32
        - name: species
          in: path
          description: Species name in Latin without spaces
          schema:
            type: string
            default: monkey
        - $ref: "#/components/parameters/PageSize"
        - name: neutered
          in: path
          required: false
          description: Ouch
          x-deprecated: 2000.01.01
          schema:
            type: boolean
            default: true
        - name: birthday
          description: When is the party?
          in: path
          required: false
          schema:
            type: string
            format: date-time
        - name: mustHave
          in: path
          required: true
          schema:
            type: string
        - name: yourBoat
          in: path
          description: Pi is always good
          required: true
          schema:
            type: numeric
            default: 3.14159
        - name: anotherQparam
          description: Query parameter
          in: query
          required: true
          schema:
            type: string
        - name: more
          in: query
          required: false
          deprecated: true
          schema:
            type: boolean
            default: false
        - name: foobar
          type: bogus
          in: path
          deprecated: true
        - name: dayValue
          in: query
          x-deprecated: last-release
          schema:
            type: str
            enum:
            - Mon
            - Tue
            - Wed
        - name: strListProp
          in: query
          schema:
            type: array
            items:
              type: string
        - name: enumWithDefault
          in: query
          schema:
            type: str
            enum:
            - This
            - That
            - TheOtherThing
            default: TheOtherThing
        - name: strEnumWithIntValues
          in: query
          schema:
            type: string
            enum:
            - 1
            - two
            - 3
            - four
            default: 1
        - name: type
          in: query
          schema:
            type: integer
        - name: paramWithEnumRef
          in: query
          schema:
            $ref: '#/components/schemas/Species'
            default: frog
        - name: addr
          in: query
          schema:
            $ref: '#/components/schemas/Address'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetExt'
        required: true
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: List all pets (optionally of specified species)
      operationId: deleteSomething
      tags:
        - pets
      responses:
        '204':
          description: A paged array of pets
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /sna/foo:
    get:
      operationId: snafooCheck
      summary: Check on how messed up things are
      deprecated: true
      responses:
        '202':
          description: This is an empty response
    delete:
      operationId: snafooDelete
      summary: Straighten things out
      x-deprecated: 3.2.1
      responses:
        '204':
          description: This is an empty response
    post:
      operationId: snaFooCreate
      summary: Create a normally messed up situation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComplexList'
components:
  parameters:
    PageSize:
      name: page-size
      description: Maximum items per page
      in: query
      schema:
        type: integer
        default: 100
  schemas:
    Pet:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        name:
          description: Pet name
          type: string
        tag:
          description: Pet classification
          type: string
        anotherValue:
          description: A string with a default
          type: string
          default: Anything goes
          deprecated: true
    PetExt:
      allOf:
      - $ref: "#/components/schemas/Pet"
      - properties:
          bogus:
            description: "Misleading help"
            type: imaginary
            x-deprecated: 7.8.9
          flavor:
            $ref: "#/components/schemas/Species"
          binString:
            type: string
            enum:
            - 1
            - 2
            - 4
            - 8
            default: 4
          optionalList:
            oneOf:
            - type: string
            - type: array
              items:
                type: string
          firstChoice:
            oneOf:
            - type: integer
            - type: array
              items:
                type: string
          listVarious:
            type: array
            items:
              oneOf:
              - type: boolean
              - type: integer
              - type: string
          format:
            type: string
            default: text
          gone:
            description: To be removed
            x-deprecated: 5.6
            type: string

    Pets:
      type: array
      maxItems: 100
      items:
        $ref: "#/components/schemas/Pet"
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Person:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          readOnly: true
        name:
          type: string
          descrption: Name of the pet owner
      required:
      - id
      - name
    Address:
      type: object
      description: Mailing address
      properties:
        street:
          type: string
          description: Street address (e.g. 123 Main Street, POBox 507)
        city:
          type: string
        state:
          type: string
        zipCode:
          type: string
        geoPoint:
          type: string
          readOnly: true 
      required:
      - zipCode
    Owner:
      allOf:
      - $ref: '#/components/schemas/Person'
      properties:
        home:
          type: object
          $ref: '#/components/schemas/Address'
        iceCream:
          description: Favorite ice cream flavor
          type: string
        birthday:
          type: string
          readOnly: true
    Species:
      description: Species type
      type: string
      enum:
      - cat
      - dog
      - bunny
      - frog
    AllOfSpecies:
      allOf:
      - $ref: "#/components/schemas/Species"
    RefToSpecies:
      $ref: "#/components/schemas/Species"
    SpeciesProp:
      properties:
        species:
          $ref: "#/components/schemas/Species"
    PetReference:
      allOf:
      - $ref: "#/components/schemas/Pet"
    PetInherited:
      allOf:
      - type: object
        properties:
          id:
            type: string
          name:
            type: string
    GeometryString:
      type: string
      description: A geometry represented in Well-Known Text (WKT) format.
      format: wkt
      nullable: true
    ObservationStation:
      type: object
      properties:
        "@context":
          "$ref": "#/components/schemas/JsonLdContext"
        geometry:
          "$ref": "#/components/schemas/GeometryString"
        "@id":
          type: string
          format: uri
        "@type":
          enum:
          - wx:ObservationStation
          type: string
        stationIdentifier:
          type: string
        name:
          type: string
        timeZone:
          type: string
          format: iana-time-zone-identifier
        forecast:
          type: string
          description: A link to the NWS public forecast zone containing this station.
          format: uri
        county:
          type: string
          description: A link to the NWS county zone containing this station.
          format: uri
        fireWeatherZone:
          type: string
          description: A link to the NWS fire weather forecast zone containing this
            station.
          format: uri
      additionalProperties: false
    ObservationStationCollectionGeoJson:
      allOf:
      - "$ref": "#/components/schemas/GeoJsonFeatureCollection"
      - type: object
        properties:
          features:
            type: array
            items:
              type: object
              properties:
                properties:
                  "$ref": "#/components/schemas/ObservationStation"
          observationStations:
            type: array
            items:
              type: string
              format: uri
          pagination:
            "$ref": "#/components/schemas/PaginationInfo"
          standalone:
            type: boolean
            readOnly: true
    GeoJsonFeatureCollection:
      required:
      - type
      - features
      type: object
      properties:
        "@context":
          "$ref": "#/components/schemas/JsonLdContext"
        type:
          enum:
          - FeatureCollection
          type: string
        features:
          type: array
          items:
            "$ref": "#/components/schemas/GeoJsonFeature"
      description: A GeoJSON feature collection. Please refer to IETF RFC 7946 for
        information on the GeoJSON format.
    PaginationInfo:
      required:
      - next
      type: object
      properties:
        next:
          type: string
          description: A link to the next page of records
          format: uri
      description: Links for retrieving more data from paged data sets
      additionalProperties: false
    JsonLdContext:
      anyOf:
      - type: array
        items: {}
      - type: object
    DeeperNesting:
      allOf:
      - "$ref": "#/components/schemas/ObservationStationCollectionGeoJson"
      properties:
        owner:
          "$ref": "#/components/schemas/Owner"
    GeoJsonFeature:
      required:
      - type
      - geometry
      - properties
      type: object
      properties:
        "@context":
          "$ref": "#/components/schemas/JsonLdContext"
        id:
          type: string
          format: uri
        type:
          enum:
          - Feature
          type: string
        geometry:
          "$ref": "#/components/schemas/GeoJsonGeometry"
        properties:
          type: object
      description: A GeoJSON feature. Please refer to IETF RFC 7946 for information
        on the GeoJSON format.
      additionalProperties: false
    TrelloID:
      type: string
      pattern: "^[0-9a-fA-F]{24}$"
    Color:
      type: string
      enum:
      - yellow
      - purple
      - blue
      nullable: true
    EnumListProperty:
      type: object
      required:
      - rainbow
      properties:
        rainbow:
          type: array
          items:
            $ref: "#/components/schemas/Color"
    Attachment:
      type: object
      properties:
        id:
          "$ref": "#/components/schemas/TrelloID"
        bytes:
          type: string
          nullable: true
        date:
          type: string
          format: date
        edgeColor:
          type: string
          "$ref": "#/components/schemas/Color"
          nullable: true
        idMember:
          type: string
        isUpload:
          type: boolean
        mimeType:
          type: string
        name:
          type: string
        previews:
          type: array
          items:
            type: string
        url:
          type: string
          format: url
        pos:
          type: number
          format: float
    MultiAttachmentProperties:
      allOf:
      - properties:
          files:
            type: array
            items:
              $ref: "#/components/schemas/Attachment"
          color:
            $ref: "#/components/schemas/Color"
    MultiAttachmentList:
      type: array
      items:
        $ref: "#/components/schemas/Attachment"
    MissingInheritedSubmodel:
      allOf:
        - $ref: "#/components/schemas/NoSuchModel"
      type: object
      required:
      - sna
      properties:
        sna:
          type: string
    MissingSubmodelProperty:
      type: object
      properties:
        foo:
          $ref: "#/components/schemas/NoSuchModel"
        bar:
          type: string
    MissingItemsModel:
      type: object
      properties:
        foo:
          type: integer
        bar:
          type: array
          items:
            $ref: "#/components/schemas/NoSuchModel"
    RoleEnum:
      enum:
      - OWNER
      - ADMIN
      - CONTRIB
      - VIEWER
      type: string
    MembershipCreate:
      type: object
      properties:
        user:
          type: string
          format: uri
          description: The user of the membership.
        role:
          allOf:
          - $ref: '#/components/schemas/RoleEnum'
          description: The role that the user has in the organization.
      required:
      - role
      - user
    MembershipCreateAnyOf:
      type: object
      properties:
        role:
          anyOf:
          - $ref: '#/components/schemas/RoleEnum'
          description: The role that the user has in the organization.
    MembershipCreateOneOf:
      type: object
      properties:
        role:
          oneOf:
          - $ref: '#/components/schemas/RoleEnum'
          description: The role that the user has in the organization.
    ComplexList:
      type: object
      properties:
        attachments:
          type: array
          items:
            $ref: "#/components/schemas/Attachment"
    MultipleAnyOf:
      anyOf:
      - $ref: '#/components/schemas/Pet'
      - $ref: '#/components/schemas/MissingItemsModel'
      type: object
